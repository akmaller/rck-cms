generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EDITOR
  AUTHOR
}

enum ArticleStatus {
  DRAFT
  REVIEW
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

model User {
  id                     String                  @id @default(cuid())
  email                  String                  @unique
  passwordHash           String
  name                   String
  avatarUrl              String?                 @db.Text
  role                   UserRole                @default(AUTHOR)
  bio                    String?                 @db.Text
  twoFactorEnabled       Boolean                 @default(false)
  twoFactorSecret        String?                 @db.Text
  lastLoginAt            DateTime?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  articles               Article[]               @relation("ArticleAuthor")
  pages                  Page[]                  @relation("PageAuthor")
  media                  Media[]
  accounts               Account[]
  sessions               Session[]
  twoFactorTokens        TwoFactorToken[]
  twoFactorConfirmations TwoFactorConfirmation[]
  auditLogs              AuditLog[]

  @@index([role])
}

model Category {
  id          String            @id @default(cuid())
  name        String
  slug        String            @unique
  description String?           @db.Text
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  articles    ArticleCategory[]
}

model Tag {
  id        String       @id @default(cuid())
  name      String
  slug      String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  articles  ArticleTag[]
}

model Media {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  fileName    String
  url         String    @unique
  mimeType    String
  size        Int
  width       Int?
  height      Int?
  storageType String    @default("local")
  createdAt   DateTime  @default(now())
  createdById String?
  createdBy   User?     @relation(fields: [createdById], references: [id])
  article     Article[]
  pages       Page[]     @relation("PageFeaturedMedia")

  @@index([storageType])
}

model Article {
  id              String            @id @default(cuid())
  title           String
  slug            String            @unique
  excerpt         String?           @db.Text
  content         Json
  status          ArticleStatus     @default(DRAFT)
  publishedAt     DateTime?
  featured        Boolean           @default(false)
  authorId        String
  author          User              @relation("ArticleAuthor", fields: [authorId], references: [id])
  featuredMediaId String?
  featuredMedia   Media?            @relation(fields: [featuredMediaId], references: [id])
  categories      ArticleCategory[]
  tags            ArticleTag[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([status, publishedAt])
  @@index([authorId])
}

model ArticleCategory {
  articleId  String
  categoryId String
  assignedAt DateTime @default(now())

  article  Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([articleId, categoryId])
}

model ArticleTag {
  articleId  String
  tagId      String
  assignedAt DateTime @default(now())

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
}

model Page {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  excerpt     String?       @db.Text
  content     Json
  status      ArticleStatus @default(DRAFT)
  publishedAt DateTime?
  authorId    String
  author      User          @relation("PageAuthor", fields: [authorId], references: [id])
  featuredMediaId String?
  featuredMedia   Media?       @relation("PageFeaturedMedia", fields: [featuredMediaId], references: [id])
  menuItems   MenuItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model SiteConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuItem {
  id         String     @id @default(cuid())
  menu       String
  title      String
  slug       String?
  url        String?
  icon       String?
  order      Int        @default(0)
  parentId   String?
  pageId     String?
  isExternal Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  parent     MenuItem?  @relation("MenuHierarchy", fields: [parentId], references: [id])
  children   MenuItem[] @relation("MenuHierarchy")
  page       Page?      @relation(fields: [pageId], references: [id])

  @@index([menu])
  @@index([parentId])
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([entity, entityId])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model TwoFactorConfirmation {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
